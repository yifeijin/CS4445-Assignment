from mrjob.job import MRJob
#-------------------------------------------------------------------------
'''
    Problem 4: 
    In this problem, you will use mapreduce framework to implement matrix multipication. 
    You could test the correctness of your code by typing `nosetests test4.py` in the terminal.
'''

#--------------------------
class MatMul(MRJob):
#--------------------------
    ''' 
        Given a matrix A and a matrix B, compute the product A*B = C
    '''

    #----------------------
    @staticmethod
    def parse_line(line):
        '''
            parse one line of text from the data file.
            Input:
                    line: one line of text of a data record
            return: 
                    matrix_name: 'A' or 'B' 
                    i: row index, an integer (note, the index starts from 1) 
                    j: column index (note, the index starts from 1) 
                    v: the value of the entry; 
                    nr: number of rows in the matrix C
                    nc: number of columns in the matrix C
        '''
        line.replace(" ", "")
        s = line.split(",")
        matrix_name = s[0]
        i = int(s[1])
        j = int(s[2])
        v = float(s[3])
        nr = int(s[4])
        nc = int(s[5])

        return matrix_name, i,j,v, nr, nc

    #----------------------
    def mapper(self, in_key, in_value):
        ''' 
            mapper function, which process a key-value pair in the data and generate intermediate key-value pair(s)
            Input:
                    in_key: the key of a data record (in this example, can be ignored)
                    in_value: the value of a data record, (in this example, it is a line of text string in the data
                    file, check 'matrix.csv' for example)
            Yield: 
                    (out_key, out_value) :intermediate key-value pair(s). You need to design the format and meaning of
                    the key-value pairs. These intermediate key-value pairs will be feed to reducers, after grouping all
                    the values with a same key into a value list.
        '''
        
        # parse one line of text data
        matrix_name, i, j, v, nr, nc = self.parse_line(in_value)
        if matrix_name == "A":
            for col in range(nc):
                yield ('C', i, col+1), (matrix_name, i, j, v)
        if matrix_name == "B":
            for row in range(nr):
                yield ('C', row+1, j), (matrix_name, i, j, v)



    #----------------------
    def reducer(self, in_key, in_values):
        ''' 
            reducer function, which processes a key and value list and produces output key-value pair(s)
            Input:
                    in_key: an intermediate key from the mapper
                    in_values: a list (generator) of values , which contains all the intermediate values with the same
                    key (in_key) generated by all mappers
            Yield: 
                    (out_key, out_value) : output key-value pair(s). 
        '''
        l = list(in_values)
        length = int(len(l) / 2)
        A_list = l[0:length]
        B_list = l[length:]
        res = 0
        for i in range(length):
            res += A_list[i][-1] * B_list[i][-1]
        yield in_key, res
